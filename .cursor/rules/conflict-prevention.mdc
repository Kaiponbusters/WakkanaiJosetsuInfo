---
alwaysApply: true
---

# コンフリクト防止とブランチ管理ガイドライン

## ブランチ戦略の基本原則

### 必須ブランチワークフロー
- **どんなに小さな変更でも必ずブランチを切って作業すること**
- **mainブランチへの直接コミットは絶対禁止**
- **すべての変更はPull Requestを通してマージすること**
- 1行の修正、タイポ修正、設定変更なども例外なくブランチ作業

### 新機能・修正ブランチの作成
- **必ずmainブランチから派生させること**
- 長期間のfeatureブランチからの派生は禁止
- ブランチ作成前に必ず `git fetch origin` で最新状態を取得

```bash
# 必須ブランチワークフロー手順
git fetch origin                    # 最新状態を取得
git checkout origin/main            # mainブランチに切り替え
git checkout -b fix/feature-name    # 新しいブランチを作成
# 作業・修正を実行
git add .                          # 変更をステージング
git commit -m "message"            # コミット
git push origin fix/feature-name   # GitHubにpush
gh pr create                       # PR作成（GitHub CLI使用）
```

### ブランチ命名規則
- `fix/` - バグ修正
- `feat/` - 新機能追加
- `refactor/` - リファクタリング
- `docs/` - ドキュメント更新
- `test/` - テスト追加・修正
- `chore/` - 設定変更・メンテナンス

## Pull Request作成前のチェックリスト

### 必須チェック項目
- [ ] **ブランチを切って作業したか（mainへの直接変更は禁止）**
- [ ] **GitHub CLIまたはWeb UIでPRを作成したか**
- [ ] **PR作成前にpushが完了しているか**

### コンフリクト回避のための事前確認
- [ ] mainブランチから直接派生しているか確認
- [ ] 変更ファイル数が適切か（目安：10ファイル以内）
- [ ] 追加・削除行数が適切か（目安：500行以内）
- [ ] 複数の機能が混在していないか確認

### 大量変更の分割指針
```bash
# 大量変更を検出するコマンド
git diff --stat origin/main...HEAD

# ファイル数と行数をチェック
# ファイル数 > 15 または 変更行数 > 1000 の場合は分割を検討
```

## 危険なブランチパターン

### 避けるべきブランチ状況（絶対禁止）
- **mainブランチへの直接コミット**: 最も重要な禁止事項
- **ブランチを切らずに作業**: たとえ1行の修正でも禁止
- **PR作成を省略**: すべての変更はPR経由でマージすること
- **古いfeatureブランチからの派生**: 大量のコンフリクトの原因
- **複数機能の混在**: レビューが困難で競合しやすい
- **長期間の未マージブランチ**: mainとの乖離が大きくなる

### 対処法
```bash
# 古いブランチの場合：新しくクリーンなブランチを作成
git checkout origin/main
git checkout -b fix/clean-branch-name
# 必要な変更のみ cherry-pick または手動適用
```

## コンフリクト発生時の対応

### 早期発見のための定期チェック
- 開発中は1日1回mainとの差分を確認
- 大きな変更がある場合は事前にmainをマージ

```bash
# mainとの差分確認
git fetch origin
git log --oneline HEAD..origin/main
git diff --stat origin/main...HEAD
```

### 緊急時のブランチ作り直し手順
1. 現在の変更をバックアップ
2. mainから新しいブランチを作成
3. 必要な変更のみを適用
4. 古いブランチとPRを削除

## 自動化とツール活用

### GitHub Actions での自動チェック
- コンフリクト検出の自動化
- ブランチサイズのチェック
- TypeScriptコンパイルエラーの事前検出

### 推奨ツールコマンド
```bash
# ブランチの健全性チェック
npm run build  # TypeScriptエラー確認
npm run lint   # リンターエラー確認
npm run test   # テスト実行

# コンフリクト可能性の事前確認
git merge-tree $(git merge-base HEAD origin/main) HEAD origin/main
```

## レビュープロセスの改善

### Pull Request サイズの適正化
- **Small PR推奨**: 変更は1つの目的に集中
- **段階的リリース**: 大きな機能は複数PRに分割
- **依存関係の明確化**: PR間の依存関係を明記

### コードレビューでの確認項目
- [ ] ブランチの派生元が適切か
- [ ] 変更範囲が適切に限定されているか
- [ ] 不要な変更（空白、改行など）が含まれていないか
- [ ] [.gitignore](mdc:.gitignore) の更新が適切か

## 緊急時の対応フロー

### 大量コンフリクト発生時
1. **即座に作業停止** - さらなる変更を避ける
2. **現状分析** - `git log --graph --oneline` で状況確認
3. **クリーンブランチ作成** - mainから新しいブランチを作成
4. **最小限の変更適用** - 必要な修正のみを移植
5. **古いブランチ削除** - 混乱を避けるため即座に削除

### エスカレーション基準
- コンフリクトファイル数 > 10
- 変更行数 > 2000
- 自動マージが不可能な場合

## 監視とメトリクス

### 定期的な監視項目
- ブランチの生存期間（1週間以内推奨）
- PRのサイズ（変更ファイル数・行数）
- マージまでの時間（48時間以内推奨）

これらのガイドラインに従うことで、今回のような大量コンフリクトを防ぎ、スムーズな開発フローを維持できます。