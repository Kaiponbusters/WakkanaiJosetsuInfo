---
alwaysApply: true
---
# コミットルール
- ファイルの追加・更新を行った際には必ずコミットをすること。
- GithubにPRを作成すること。

# コミットメッセージ規約（Conventional Commits＋日本語）

## 基本ルール
- コミットメッセージは必ず **Conventional Commits** フォーマットで記述してください。
- メッセージ本文・説明は必ず**日本語**で記載してください。
- 関連する **Issue番号** を必ず記載してください（例: `refs #123`）。
- 1コミット1トピック（原子コミット）を強く推奨します。
- 作業途中（WIP）の場合は、`WIP:` で始めてください。
- コミット後は必ず **GitHub CLI** を使ってPull Requestを作成してください。

## コミットメッセージの書式
```
<type>(スコープ): <日本語の要約> [refs #Issue番号]

<詳細な説明（必要に応じて）>

[refs #Issue番号]
```
- type: `feat`, `fix`, `docs`, `refactor`, `test`, `chore`, `style`, `perf`, `build`, `ci`, `revert`, `WIP` など
- スコープ: 省略可。対象モジュールや機能名を括弧で指定
- 要約: 50文字以内を推奨
- 本文: 必要に応じて詳細を記載
- Issue番号: `refs #123` の形式で必ず記載

### 例
```
feat(api): 除雪情報APIのバリデーションを強化 [refs #42]

- 入力値の型チェックを追加
- エラーメッセージを日本語化

refs #42
```
```
fix(ui): 日付表示のバグ修正 [refs #56]

refs #56
```
```
WIP: 除雪地点マップのUI改善 [refs #99]

- レイアウト調整中

refs #99
```

## 禁止事項
- 英語や曖昧なメッセージ（例: `update`, `fix bug`）は禁止
- Issue番号の記載漏れ禁止
- 1コミットで複数トピックをまとめることは禁止

## 運用ルール
- コミット後は必ずGitHub CLIでPull Requestを作成してください
- Pull Requestのタイトル・説明も日本語で記載し、関連Issueを明記してください
- WIPコミットは原則PRに含めず、作業ブランチでのみ利用してください

---
このルールはプロジェクト全体に適用されます。