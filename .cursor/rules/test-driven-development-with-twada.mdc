---
alwaysApply: true
---
# テストは**必ず** t-wadaの推奨する方法で進めること。

# Test Driven Development (TDD) のルール - by t-wada

- まず「次の目標」を明確に考えること。
- その目標を示すテストを書くこと。
- テストを実行し、必ず失敗（Red）させること。
- 必要最小限の実装コードを書き、テストを通す（Green）こと。
- テストが通った状態でリファクタリング（Refactor）を行うこと。
- Refactorを行う際には **Martin FowlerのRefactoring** の手法を使用すること。
- 上記サイクル（Red → Green → Refactor）を繰り返すこと。

## 良いテストの条件（F.I.R.S.T/A-TRIP原則）

- Fast（速い）: テストは素早く実行できること
- Independent（独立している）: テスト同士が依存しないこと
- Repeatable（繰り返し実行できる）: 何度でも同じ結果になること
- Self-Validating（自己検証可能）: テストの成否が自動で分かること
- Timely（タイムリー）: 実装前/実装中にテストを書くこと
- Automated（自動化されている）: テストは自動で実行できること
- Thorough（網羅的である）: 必要なケースを十分にカバーしていること
- Professional（プロフェッショナルとしての品質を意識すること）

## 心得

- TDDの最大のメリットは「心理的なもの」：即座のフィードバック、コードへの自信
- テストは品質を上げるきっかけであり、品質を上げるのはプログラミングそのもの
- テストコードもリファクタリングし、メンテナンス性を高めること
- TDDはスキルであり、誰でも習得可能。量をこなして質を高めること
- テスト専門家と開発者が協力し、より良いソフトウェアを目指すこと

参考: [Test Yourself - テストを書くと何がどう変わるか (和田卓人 JaSST 2014)](https://www.slideshare.net/slideshow/jasst-2014-hokkaidotwadatdd/38766813)

